using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System;
using System.Collections.Generic;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace Contentful.ModelGenerator.Cli.Utils
{
    internal static class ModelGeneratorHelper
    {
        public static string FirstCharToUpper(this string input) => input switch
        {
            null => throw new ArgumentNullException(nameof(input)),
            "" => throw new ArgumentException($"{nameof(input)} cannot be empty", nameof(input)),
            _ => input[0].ToString().ToUpper() + input[1..]
        };

        /// <summary>
        /// Generates code like this:<br/>
        /// <c>using System;</c>
        /// </summary>
        public static UsingDirectiveSyntax[] GetCommonUsings() => new[]
        {
            UsingDirective(ParseName("System")),
            UsingDirective(ParseName("System.CodeDom.Compiler")),
            UsingDirective(ParseName("System.Collections.Generic")),
            UsingDirective(ParseName("System.Linq")),
            UsingDirective(ParseName("System.Text")),
            UsingDirective(ParseName("System.Threading.Tasks")),
            UsingDirective(ParseName("Contentful.Core.Models")),
        };

        /// <summary>
        /// Generates comment for auto-generated statement.
        /// </summary>
        public static SyntaxTriviaList GetHeaderComment() =>
            TriviaList(new[]
            {
                CommentLn("//------------------------------------------------------------------------------"),
                CommentLn("// <auto-generated>"),
                CommentLn("//     This code was generated by " + ToolHelper.GetToolName() + " tool."),
                CommentLn("//     Runtime Version: " + ToolHelper.GetToolVersion()),
                CommentLn("//"),
                CommentLn("//     Changes to this file may cause incorrect behavior and will be lost if"),
                CommentLn("//     the code is regenerated."),
                CommentLn("// </auto-generated>"),
                CommentLn("//------------------------------------------------------------------------------"),
                CommentLn(""),
            });

        private static SyntaxTrivia CommentLn(string comment) => Comment(comment + Environment.NewLine);

        /// <summary>
        /// Generates code like this:<br/>
        /// <c>[GeneratedCode("Tool.Cli", "1.0.0")]</c>
        /// </summary>
        public static AttributeListSyntax GetAutoGeneratedAttribute()
        {
            // [GeneratedCode("Tool.Cli", "1.0.0")]
            var name = ParseName("GeneratedCode");
            var arguments = ParseAttributeArgumentList($"(\"{ToolHelper.GetToolName()}\", \"{ToolHelper.GetToolVersion()}\")");
            var attribute = Attribute(name, arguments);

            var attributeList = new SeparatedSyntaxList<AttributeSyntax>();
            attributeList = attributeList.Add(attribute);
            return AttributeList(attributeList);
        }

        /// <summary>
        /// Generates code like this:<br/>
        /// <c>public const string ContentTypeId = "myContentType";</c>
        /// </summary>
        public static FieldDeclarationSyntax GetIdConstantDeclaration(string id)
        {
            // public const string ContentTypeId = "myContentType";
            return FieldDeclaration(
                    VariableDeclaration(
                        PredefinedType(
                            Token(SyntaxKind.StringKeyword)))
                    .AddVariables(VariableDeclarator(
                        Identifier(ClassConventions.ContentTypeIdMember))
                            .WithInitializer(
                                EqualsValueClause(
                                    LiteralExpression(
                                        SyntaxKind.StringLiteralExpression,
                                        Literal(id))))))
                .AddModifiers(new[]
                {
                    Token(SyntaxKind.PublicKeyword),
                    Token(SyntaxKind.ConstKeyword)
                })
                .AddAttributeLists(GetAutoGeneratedAttribute());
        }

        /// <summary>
        /// Generates code like this:<br/>
        /// <c>public SystemProperties Sys { get; set; }</c>
        /// </summary>
        public static PropertyDeclarationSyntax GetSystemFieldDeclaration()
        {
            // public SystemProperties Sys { get; set; }
            return PropertyDeclaration(ParseTypeName(Types.SystemProperties), ClassConventions.SystemMember)
                .AddModifiers(Token(SyntaxKind.PublicKeyword))
                .AddAccessorListAccessors(
                    AccessorDeclaration(SyntaxKind.GetAccessorDeclaration).WithSemicolonToken(Token(SyntaxKind.SemicolonToken)),
                    AccessorDeclaration(SyntaxKind.SetAccessorDeclaration).WithSemicolonToken(Token(SyntaxKind.SemicolonToken)))
                .AddAttributeLists(GetAutoGeneratedAttribute());
        }

        public static class Types
        {
            public const string Object = "object";
            public const string Int = "int";
            public const string String = "string";
            public const string Float = "float";
            public const string Bool = "bool";
            public const string Task = nameof(System.Threading.Tasks.Task);
            public const string DateTime = nameof(System.DateTime);
            public const string Asset = nameof(Core.Models.Asset);
            public const string Document = nameof(Core.Models.Document);
            public const string Location = nameof(Core.Models.Location);
            public const string SystemProperties = nameof(Core.Models.SystemProperties);
            public const string HtmlRenderer = nameof(Core.Models.HtmlRenderer);
            public const string HtmlRendererToHtml = nameof(Core.Models.HtmlRenderer.ToHtml);

            public static string IEnumerableOf(string type)
            {
                return $"{nameof(IEnumerable<object>)}<{type}>";
            }
        }

        public static class FieldTypes
        {
            public const string Symbol = "Symbol";
            public const string Text = "Text";
            public const string RichText = "RichText";
            public const string Integer = "Integer";
            public const string Date = "Date";
            public const string Number = "Number";
            public const string Boolean = "Boolean";
            public const string Location = "Location";
            public const string Link = "Link";
            public const string Array = "Array";
            public const string Object = "Object";
        }

        public static class LinkTypes
        {
            public const string Asset = "Asset";
            public const string Symbol = "Symbol";
            public const string Entry = "Entry";
        }

        public static class ClassConventions
        {
            public const string ContentTypeIdMember = "ContentTypeId";
            public const string SystemMember = "Sys";

            public static string RenderAsyncMethod(string fieldName) => $"Render{fieldName.FirstCharToUpper()}Async";
        }
    }
}
